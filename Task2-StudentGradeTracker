import tkinter as tk
from tkinter import messagebox


class Student:
    def __init__(self, name):
        self.name = name
        self.grades = {}

    def add_grade(self, subject, grade):
        self.grades[subject] = grade

    def calculate_average(self):
        if len(self.grades) == 0:
            return 0
        return sum(self.grades.values()) / len(self.grades)

    def get_letter_grade(self):
        avg = self.calculate_average()
        if avg >= 90:
            return 'A'
        elif avg >= 80:
            return 'B'
        elif avg >= 70:
            return 'C'
        elif avg >= 60:
            return 'D'
        else:
            return 'F'

    def display_report(self):
        report = f"Student: {self.name}\n"
        for subject, grade in self.grades.items():
            report += f"{subject}: {grade}\n"
        report += f"Average: {self.calculate_average():.2f}\n"
        report += f"Letter Grade: {self.get_letter_grade()}\n"
        return report


class GradeTrackerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Student Grade Tracker")
        self.students = {}

        # Create the GUI layout
        self.label_title = tk.Label(root, text="Grade Tracker", font=("Arial", 16))
        self.label_title.pack(pady=10)

        self.frame_student = tk.Frame(root)
        self.frame_student.pack(pady=10)

        self.label_name = tk.Label(self.frame_student, text="Student Name:")
        self.label_name.grid(row=0, column=0, padx=5, pady=5)
        self.entry_name = tk.Entry(self.frame_student)
        self.entry_name.grid(row=0, column=1, padx=5, pady=5)

        self.btn_add_student = tk.Button(self.frame_student, text="Add Student", command=self.add_student)
        self.btn_add_student.grid(row=0, column=2, padx=5, pady=5)

        self.frame_grade = tk.Frame(root)
        self.frame_grade.pack(pady=10)

        self.label_subject = tk.Label(self.frame_grade, text="Subject:")
        self.label_subject.grid(row=0, column=0, padx=5, pady=5)
        self.entry_subject = tk.Entry(self.frame_grade)
        self.entry_subject.grid(row=0, column=1, padx=5, pady=5)

        self.label_grade = tk.Label(self.frame_grade, text="Grade (0-100):")
        self.label_grade.grid(row=1, column=0, padx=5, pady=5)
        self.entry_grade = tk.Entry(self.frame_grade)
        self.entry_grade.grid(row=1, column=1, padx=5, pady=5)

        self.btn_add_grade = tk.Button(self.frame_grade, text="Add Grade", command=self.add_grade)
        self.btn_add_grade.grid(row=2, column=1, padx=5, pady=5)

        self.frame_report = tk.Frame(root)
        self.frame_report.pack(pady=10)

        self.label_report_student = tk.Label(self.frame_report, text="Student Name:")
        self.label_report_student.grid(row=0, column=0, padx=5, pady=5)
        self.entry_report_student = tk.Entry(self.frame_report)
        self.entry_report_student.grid(row=0, column=1, padx=5, pady=5)

        self.btn_view_report = tk.Button(self.frame_report, text="View Report", command=self.view_report)
        self.btn_view_report.grid(row=1, column=1, padx=5, pady=5)

        self.btn_view_all_reports = tk.Button(root, text="View All Reports", command=self.view_all_reports)
        self.btn_view_all_reports.pack(pady=10)

    def add_student(self):
        name = self.entry_name.get()
        if name:
            if name not in self.students:
                self.students[name] = Student(name)
                messagebox.showinfo("Success", f"Student {name} has been added!")
            else:
                messagebox.showerror("Error", f"Student {name} already exists!")
        else:
            messagebox.showerror("Error", "Please enter a student name.")

    def add_grade(self):
        name = self.entry_name.get()
        subject = self.entry_subject.get()
        try:
            grade = float(self.entry_grade.get())
            if 0 <= grade <= 100:
                if name in self.students:
                    self.students[name].add_grade(subject, grade)
                    messagebox.showinfo("Success", f"Added grade {grade} in {subject} for {name}.")
                else:
                    messagebox.showerror("Error", f"Student {name} not found. Please add the student first.")
            else:
                messagebox.showerror("Error", "Grade must be between 0 and 100.")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid grade.")

    def view_report(self):
        name = self.entry_report_student.get()
        if name in self.students:
            report = self.students[name].display_report()
            messagebox.showinfo("Student Report", report)
        else:
            messagebox.showerror("Error", f"Student {name} not found!")

    def view_all_reports(self):
        if self.students:
            all_reports = ""
            for student in self.students.values():
                all_reports += student.display_report() + "\n"
            messagebox.showinfo("All Students Reports", all_reports)
        else:
            messagebox.showerror("Error", "No students available to display reports.")


# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = GradeTrackerApp(root)
    root.geometry("400x400")  # Set window size
    root.mainloop()
